---
title: "Analyzing the Factors that Determine Housing Prices in Beijing and Predict Trends in the 21st Century"
subtitles: "The Building Structures and The Number of Living Rooms as Prime Drivers of Price Surges"
author: "Xincheng Zhang"
date: today
date-format: long
abstract: "This report uses Kaggle's beta API, and collects the Housing price of Beijing from 2011 to 2017, fetching from Lianjia company. Taking the average price by square as the main observation object, and analyzing the potential factors affecting Beijing's housing prices based on geographical coordinates, building type, number of kitchens, and other characteristics. The study found that building structures and the number of living rooms have the most significant impact on surging house prices. These results may have significance in the trend prediction of Beijing housing prices and provide a reference for personal home purchase decisions and economic management. "
format: pdf
thanks: 'Code and data are available at: https://github.com/zxc0707/Beijing-housing-price'
toc: true
bibliography: references.bib
---

```{r}
#| message: false
#| echo: false
#| warning: false
## Loading Libraries/Packages in R.
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(psych)
library(lubridate)
library(knitr)
library(ds4psy)
library(scales)
library(ggplot2)
library(car)
library(stats)
library(readr)
library(dplyr)
library(dagitty)
```



```{r}
#| message: false
#| echo: false
#| warning: false
## Read the using dataset
cleaned_sampled_data <- read.csv("/cloud/project/input/cleaned_sampled_data.csv")
sampled_data <- read.csv("/cloud/project/input/sampled_data.csv")
```

# Introduction

Beijing, located in northern China and the capital, has a rich cultural heritage and humanistic resources from a historical perspective. In the past 20 years, citizens' demand for housing has been stimulated by the growing population and economic development, with the specific growth rate soaring at an average annual rate of 43%. [@article6] Beijing is the representative city of China’s real estate transaction volume. The phenomenon of housing price bubbles has been proven to occur frequently in Beijing by empirical analysis [@article1]. The specific manifestation is that the prices of land and houses are extremely high, which is inconsistent with their use value. Unfortunately, residents do not receive housing benefits that keep pace with the policies, which induces the impact of housing affordability on the social and economic sustainability of cities. [@article2] Moreover, the increase in housing prices brought about by urban reform comes at the expense of the mental health of urban residents. Some groups of people will have negative psychological effects on housing pressure. For example, men are more likely to suffer from psychological distress than women and even induce depression. [@article5] A large number of studies on promoting the surge in housing prices show that various factors affect housing transaction prices in Beijing. From an economic perspective, land transaction prices and taxes have a decisive impact on housing transaction prices. [@article3] In addition, the influence of environmental factors is reflected in the location of housing in the city center, nearby transportation convenience, and distance from hospitals, which are all positively related to housing prices [@article4]. Analyzing housing prices in Beijing through the study of multiple factors for forecasting trends is of great assistance and importance to potential home buyers in their economic management and purchasing decisions. 


This report aims to analyze the degree of housing price differences caused by various housing characteristics from the perspective of hedonic determinants, then use the results to predict the direction of Beijing housing prices in the 21st century based on the late 20th century as the dividing line. Hedonic determinants in this case refer to differences in housing prices due to differences in housing space, materials, and other factors that bring residents experience. [@article7] Here, I hope to find some characteristics that have a clear decisive effect on housing prices and use modeling and sketching to show the order of dominance between 7 properties that affect the price. This perspective of horizontally discussing many potential factors separately according to the particular time points of the 20th century to the 21st century has not been discussed deeply in prior papers and may be of interest to economists, policymakers, and home appraisers. [@article8]


Using Kaggle's beta API, information related to Beijing housing prices was collected and assembled into a huge data set for analysis. This housing information from 2011 to 2017 was collected and displayed on Lianjia.com, which is a gap in this database because 6 years of data are scarce for studying housing issues. Basic information about each housing such as geographical location, number of bathrooms, etc. are recorded by relevant staff of Lianjia Company using tables. The final dataset used was the result of cleaning and creating new variables based on the existing observations and was analyzed according to my main research purpose.


In the Data section, the data set collected from Kaggle's beta API will be introduced and explain how to clean, place, and create new variables to achieve appropriate analysis. In this section, I will discuss the datasets, variables, and methods used to process the raw data. Next, for the Model part, I will compare the impact of different housing factors on prices under distance distribution. I will discuss the model and its impact on the interpretation of the aims. Some image sketching is shown to provide necessary explanations and evidence for predicting Beijing housing prices by taking the century junction as a time node in the Result part. Finally, the findings of a number of living rooms and the building structures that are seen as dominant in the surge in housing prices in Beijing will be discussed with implications and shortcomings of this report in the Discussion section. 


# Data

## Dataset

In order to accomplish the goals set in this report, the data package used was downloaded from a post titled "Housing price in Beijing" on Kaggle, an open database platform. Kaggle is an online community platform for data management and statistics enthusiasts, which categorizes and stores large amounts of data sets and information. Also, it allows users to upload portfolios to the online platform and access them through the website’s beta API. The original data collected in this article contains 318851 house information and 26 variables, which involve house numbers and various attributes such as house size, construction time, total price, etc.


Regarding the cleaning of the original data set, I first extracted 14 variables that have potential contributions to this report from the 26 variables in the original data set. Besides, some invalid data in the original data set such as missing data and "NaN" are cleared since missing values and these meaningless characters will affect the analysis work. Next, I set the year 2000 as the center point of time and organized the data. I first set the overall research time range from 1980 to 2020 and set each 10 years as a group, such as 1980-1990, 1990-2000, etc. Randomly select 125 observations from each of these 4 groups to form a total of 500 data. In addition, I also removed 5 rows of data that have an impact on the model establishment from the overall 500 observations based on diagnosing influential cases indicated by the influence plot. Detailed explanations can be found in the Appendix.


There are many similar data sets used to analyze housing prices in the open platform Kaggle, two of which are similar to the data sets selected for this report. The two data sets titled “Boston Housing” and “New York City Airbnb Market” also have a large collection of variables that can be used to infer underlying factors in housing prices. However, Beijing's housing prices are more representative than those in American cities since the year-to-year span is large. This advantage is more conducive to me inferring trends when comparing house prices horizontally.

## Variables and Features

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: tbl-table1

# Define data features
data_features <- data.frame(
  Feature = c("id", "Lng", "Lat", "totalPrice", "price", "square", 
              "livingRoom", "drawingRoom", "kitchen", "bathroom", 
              "buildingType", "buildingStructure", "constructionTime", "elevator"),
  Description = c("The id of transaction", 
                  "The longitude in coordinates", 
                  "The latitude in coordinates", 
                  "The total price", 
                  "The average price by square", 
                  "The square of house", 
                  "The number of living room", 
                  "The number of drawing room", 
                  "The number of kitchen", 
                  "The number of bathroom", 
                  "4 types of building (1/2/3/4)", 
                  "6 types of materials (1/2/3/4/5/6)", 
                  "The time of construction", 
                  "whether there is an elevator (1/2)")
)

# Print the table
kable(data_features, caption = "Data Features")

```



```{r}
#| message: false
#| echo: false
#| warning: false
#| label: tbl-table2

# Define the details for each data feature
building_type_details <- c("tower(1)", "bungalow(2)", "combination of plate and tower(3)", "plate(4)")
building_structure_details <- c("unknown(1)", "mixed(2)", "brick and wood(3)", "brick and concrete(4)", "steel(5)", "steel-concrete composite(6)")
elevator_details <- c("no elevator(0)", "has elevator(1)")

# Create a data frame to store the details
data_details <- data.frame(
  Feature = c("buildingType", "buildingStructure", "elevator"),
  Details = c(
    paste(building_type_details, collapse = ", "),
    paste(building_structure_details, collapse = ", "),
    paste(elevator_details, collapse = ", ")
  )
)

# Print the table
kable(data_details, caption = "Details of Several Data Features")

```

The original data set had a total of 26 variables, which I reduced to 14 variables that are relevant and manageable to the aims of this report. The specific name and description of each variable can be found in [@tbl-table1]. Among these 14 variables, 3 variables represent different meanings according to different numbers of entries in the data set, namely "buildingType", "buildingStructure" and "elevator". The specific explanation can be separately found in [@tbl-table2].


```{r}
#| message: false
#| echo: false
#| warning: false
#| label: tbl-table3

# Create a data frame to store the details
data_details <- data.frame(
  Variable = c("dif_lng", "dif_lat", "dif_cor"),
  Description = c(
    "Straight-line distance from the center of Beijing in Longitude",
    "Straight-line distance from the center of Beijing in Latitude",
    "Straight-line distance from the center of Beijing"
  )
)

# Print the table
kable(data_details, caption = "Details of New Variables")

```



In this research report, I try to use the geographical coordinates given in the data set to determine whether Beijing housing prices are related to the distance from the center of Beijing. The specific method is to take the architectural coordinates of downtown Beijing, which is (39.901996392, 116.38833178)[@cordtian]as the center of the circle. Then create variables "dif_lng" and "dif_lat" by subtracting the center coordinates from the latitude and longitude coordinates given in the data set and taking the absolute values respectively. Then, according to the Pythagorean theorem[@article9], the square root of "dif_lng" and "dif_lat" of each observation is calculated to obtain the straight-line distance between each house and the center of Beijing. Descriptions of the 3 created variables can be found in [@tbl-table3]


![A circle with the center of Beijing as the center](/cloud/project/input/map/beijing_map.png)



The relationship between variables in the data set is mainly reflected in two aspects. First, there is a positive correlation between the number of various rooms and the price per square, which means that the more the number of living rooms, drawing rooms, kitchens, and bathrooms, the more expensive the price will be. Second, building materials and building types led by the times are related to prices per square. This shows that there is a big difference between the combination of plate and tower, which is also made of brick and wood, before 2000 and after 2000. These two dependencies will be explained in detail in the Result section.


All data manipulated and presented in this report were sourced from the datasets [@lianjia] in Kaggle open website. The data processing, and analyzing for this report is using R [@Rproject] along with other support packages tidyverse[@tidyverse], psych[@psych], lubridate[@lubridate], knitr[@knitr], ds4psy[@ds4psy], scales[@scales], ggplot2[@ggplot2], car[@car], stats[@stats], readr[@readr], dplyr[@dplyr], dagitty[@dagitty].


## Missing Data

The data collected and used in this article have certain limitations, which will have varying degrees of impact on the conclusions I draw based on the analysis. Since Lianjia's collection time for this data set is limited to the six years from 2011 to 2017, more data before 2010 and after 2017 cannot be obtained and added to the analysis. This limitation also illustrates the impossibility of historical analysis relative to the macro scale. Next, the original data set was missing some variables that might have yielded more significant results. This includes but is not limited to, the direction in which the apartment faces as it relates to sunlight, as well as transaction attributes that are highly relevant to policy impacts. In addition, the irrelevances of many entries in the original data will be small and lead to inaccurate model building. Specifically, part of the data in the variables "constructionTime" and "buildingType" is marked as meaningless characters such as "NaN" due to missing data. In addition, there is also a lot of data outside the normal range for the variables "price" and "totalPrice". When this data is removed, statistical models and plots will be affected.


The source of the original data set is Lianjia Company, which is a representative real estate brokerage platform in China [@article10]. However, since Lianjia does not have professional certification in statistics, there are inevitably some inherent biases in the data set. I have no way to prove that Lianjia Company has fully provided all existing data. Further bias exists in the authenticity of the data. To be more specific, because real estate economics companies need to achieve certain performance, company personnel may hide many failure cases or fabricate some unreal success cases. Data recording may also be biased due to equipment failure or errors. These may affect the shape of our distribution

# Model

For this report, I tried to use a linear regression model to confirm that the location of the house, building Type, and building Structure have a linear relationship with the average price by square of the room and construct directed acyclic graph to visualize what I want to discuss and Modeled variables. This helps to clearly show the relationship I think exists between these variables.

```{r}
#| message: false
#| echo: false
#| warning: false

# Define DAG structure
dag <- dagitty('dag {
  "Geographical Location" -> "The average price by square"
  "BuildingStructure" -> "The average price by square"
  "BuildingType" -> "The average price by square"
}')

# Plot the DAG
plot(dag)
```


```{r}
#| message: false
#| echo: false
#| warning: false
#| label: model-lm1

# Fit linear regression model
lm_model <- lm(price ~ dif_cor, data = cleaned_sampled_data)

# Summary of the model
summary(lm_model)
```

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: model-lm1g
# Create scatter plot with regression line
ggplot(data = cleaned_sampled_data, aes(x = dif_cor, y = price)) +
  geom_point(color = "blue", alpha = 0.5) +  # Adjust point color and transparency
  geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Add regression line
  labs(x = "dif_cor", y = "Price") +
  ggtitle("Scatter Plot of Total Price vs dif_cor") +
  theme_minimal()  # Apply a minimal theme for better appearance
```



```{r}
#| message: false
#| echo: false
#| warning: false
#| label: model-lm1r
# calculates the residuals of the linear regression model
residuals <- residuals(lm_model)

# Create a plot of residuals vs fitted values
plot(cleaned_sampled_data$dif_cor, residuals, 
     xlab = "dif_cor", ylab = "Residuals",
     main = "Residuals vs dif_cor",
     col = "blue")

# Add a horizontal line at y = 0
abline(h = 0, col = "red")

# Plot the distribution of residuals
hist(residuals, 
     main = "Distribution of Residuals",
     xlab = "Residuals", ylab = "Frequency",
     col = "lightblue", border = "black")
```




$$
Y_1=\beta_0 + \beta_1X + \epsilon
$$ {#eq-eq1}

X means dif_cor





```{r}
#| message: false
#| echo: false
#| warning: false
#| label: model2-g
#| fig-cap: Prices with Different Building types
# Fit linear regression models for each type of building
lm_models1 <- lapply(levels(cleaned_sampled_data$buildingType), function(building_type) {
  lm(price ~ dif_cor + livingRoom + drawingRoom, data = subset(cleaned_sampled_data, buildingType == building_type))
})

# Create a scatter plot with regression lines for each type of building
ggplot(cleaned_sampled_data, aes(x = dif_cor, y = price, color = factor(buildingType))) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, aes(group = buildingType), linetype = "solid") +
  labs(x = "Straight-line distance from the center of Beijing", y = "Price", title = "Price vs Dif Cor by Building Type") +
  scale_color_manual(values = c("#1f77b4", "#FFD700", "#FF1493", "#d62728")) + # Change colors here
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 16, color = "#333333"),
    axis.title = element_text(face = "bold", size = 14, color = "#333333"),
    axis.text = element_text(size = 12, color = "#333333"),
    legend.title = element_blank(),
    legend.text = element_text(size = 12, color = "#333333"),
    panel.background = element_rect(fill = "#f0f0f0"),
    panel.grid.major = element_line(color = "#CCCCCC", linetype = "dotted"),
    panel.grid.minor = element_blank(),
    legend.key = element_rect(fill = "#f0f0f0"),
    panel.border = element_rect(color = "black", fill = NA)
  )

```

$$
Y2=\beta_{0} + \beta_{1}X + \beta_{2}L + \beta_{3}D + \epsilon
$$ {#eq-eq2}

X means dif_cor

L means number of  living room 

D means number of drawing room 



$$
Y3=\beta_{0}' + \beta_{1}'X+ \beta_{2}'L+ \beta_{3}'D+ \epsilon'
$$ {#eq-eq3}




$$
Y4=\beta_{0}'' + \beta_{1}''X+ \beta_{2}''L+ \beta_{3}''D+ \epsilon''
$$ {#eq-eq4}




```{r}
#| message: false
#| echo: false
#| warning: false
#| label: model3-g
#| fig-cap: Prices with Different Building Structure
# Fit linear regression models for each type of building structure
lm_models <- lapply(levels(cleaned_sampled_data$buildingStructure), function(building_structure) {
  lm(price ~  dif_cor + livingRoom + drawingRoom, data = subset(cleaned_sampled_data, buildingStructure == building_structure))
})

# Create a scatter plot with regression lines for each type of building structure
ggplot(cleaned_sampled_data, aes(x = dif_cor, y = price, color = factor(buildingStructure))) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "lm", formula = y ~ x, se = FALSE, aes(group = buildingStructure), linetype = "solid") +
  labs(x = "Straight-line distance from the center of Beijing", y = "Price", title = "Price vs Dif Cor by Building Structure") +
  scale_color_manual(values = c("#1E90FF", "#BF3EFF", "#7FFF00", "#d62728", "#9467bd", "#8c564b")) + # Adjust colors for six building structures
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 16),
    axis.title = element_text(face = "bold", size = 14),
    axis.text = element_text(size = 12),
    legend.title = element_blank(),
    legend.text = element_text(size = 12),
    panel.background = element_rect(fill = "#f0f0f0"),
    panel.grid.major = element_line(color = "#CCCCCC", linetype = "dotted"),
    panel.grid.minor = element_blank(),
    legend.key = element_rect(fill = "#f0f0f0"),
    panel.border = element_rect(color = "black", fill = NA)
  )
```

$$
Y5= \beta_{0}^{(1)} + \beta_{1}^{(1)}X+ \beta_{2}^{(1)}L+ \beta_{3}^{(1)}D+ \epsilon^{(1)}
$$ {#eq-eq5}

$$
Y6=\beta_{0}^{(2)} + \beta_{1}^{(2)}X + \beta_{2}^{(2)}L + \beta_{3}^{(2)}D + \epsilon^{(2)}
$$ {#eq-eq6}

$$
Y7= \beta_{0}^{(3)} + \beta_{1}^{(3)}X + \beta_{2}^{(3)}L + \beta_{3}^{(3)}D + \epsilon^{(3)}
$$ {#eq-eq7}

## Features

## Model Concerns

# Results

## LivingRoom and DrawingRoom & Price Interaction

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-fig1


# Create a new column to indicate whether constructionTime is before or after 2005
cleaned_sampled_data <- within(cleaned_sampled_data, {
  constructionTimeGroup <- ifelse(constructionTime < 2000, "Before 2000", "After 2000")
})

# Specify the levels of constructionTimeGroup to change the order of facets
cleaned_sampled_data$constructionTimeGroup <- factor(cleaned_sampled_data$constructionTimeGroup, levels = c("Before 2000", "After 2000"))

# Calculate the average price for each number of living rooms and constructionTime group
average_price <- aggregate(price ~ livingRoom + constructionTimeGroup, data = cleaned_sampled_data, FUN = mean)

# Create a bar plot with a trend line, faceted by constructionTime group
ggplot(data = average_price, aes(x = factor(livingRoom), y = price)) +
  geom_bar(stat = "identity", fill = "#ADD8E6", alpha = 0.7, width = 0.6) +  # Blue bars with transparency and thinner width
  geom_line(color = "#FF69B4", size = 1.5) +  # Pink trend line
  geom_point(color = "#FF69B4", size = 3) +   # Pink points for each data point
  labs(x = "Number of Living Rooms", y = "Average Price By Square",  # Add axis labels
       title = "Average Price by Number of Living Rooms",  # Add title
       caption = "Data Source: cleaned_sampled_data") +  # Add caption
  facet_wrap(~ constructionTimeGroup) +  # Facet by constructionTime group
  theme_minimal() +  # Use a minimal theme
  theme(plot.title = element_text(face = "bold", size = 16),  # Adjust title appearance
        axis.title = element_text(face = "bold", size = 14),  # Adjust axis label appearance
        axis.text = element_text(size = 12),  # Adjust axis tick label appearance
        panel.background = element_rect(fill = "#F0F0F0"),  # Change plot background color
        panel.grid.major = element_line(color = "#CCCCCC"),  # Adjust major grid lines
        panel.grid.minor = element_blank(),  # Remove minor grid lines
        plot.caption = element_text(hjust = 1))  # Adjust caption position




```

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-fig2

# Create a new column to indicate whether constructionTime is before or after 2000
cleaned_sampled_data <- within(cleaned_sampled_data, {
  constructionTimeGroup <- ifelse(constructionTime < 2000, "Before 2000", "After 2000")
})

# Calculate the average price for each number of drawing rooms and constructionTime group
average_price <- aggregate(price ~ drawingRoom + constructionTimeGroup, data = cleaned_sampled_data, FUN = mean)

# Define color palette
colors <- c("#FFA07A", "#CD3278")  # Light salmon and sky blue colors

# Create a bar plot with a trend line, faceted by constructionTime group
ggplot(data = average_price, aes(x = factor(drawingRoom), y = price)) +
  geom_bar(stat = "identity", fill = colors[1], alpha = 0.7, width = 0.4) +  # Light salmon bars with transparency and adjusted width
  geom_point(aes(x = factor(drawingRoom), y = price), color = colors[2], size = 5, position = position_dodge(width = 0.4)) +  # Sky blue points on top of the bars with increased size
  labs(x = "Number of Drawing Rooms", y = "Average Price By Square",  # Add axis labels
       title = "Average Price by Number of Drawing Rooms",  # Add title
       caption = "Data Source: cleaned_sampled_data") +  # Add caption
  facet_wrap(~ constructionTimeGroup, ncol = 1, scales = "free_y", switch = "both") +  # Facet by constructionTime group
  theme_minimal() +  # Use a minimal theme
  theme(plot.title = element_text(face = "bold", size = 16, color = "#333333"),  # Adjust title appearance
        axis.title = element_text(face = "bold", size = 14, color = "#333333"),  # Adjust axis label appearance
        axis.text = element_text(size = 12, color = "#333333"),  # Adjust axis tick label appearance
        panel.background = element_rect(fill = "#FFFFFF", color = "#CCCCCC"),  # Add panel background
        panel.grid.major = element_line(color = "#DDDDDD"),  # Adjust major grid lines
        strip.text = element_text(face = "bold", color = "#333333"))  # Adjust strip text appearance




```

## Construction Time & Price Interaction

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-fig3

# Create a new column to indicate whether constructionTime is before or after 2000
cleaned_sampled_data <- within(cleaned_sampled_data, {
  constructionTimeGroup <- ifelse(constructionTime < 2000, "Before 2000", "After 2000")
})

# Change the order of the groups
cleaned_sampled_data$constructionTimeGroup <- factor(cleaned_sampled_data$constructionTimeGroup, levels = c("Before 2000", "After 2000"))

# Create a box plot
ggplot(data = cleaned_sampled_data, aes(x = constructionTimeGroup, y = price)) +
  geom_boxplot(fill = c("#FFFF00", "#A0522D"), color = "#333333", alpha = 0.7) +  # Red and light blue box plot with adjusted outline color and transparency
  labs(x = "Construction Time", y = "Price",  # Add axis labels
       title = "Box Plot of Price by Construction Time",  # Add title
       caption = "Data Source: cleaned_sampled_data") +  # Add caption
  theme_minimal() +  # Use a minimal theme
  theme(plot.title = element_text(face = "bold", size = 16, color = "#333333"),  # Adjust title appearance
        axis.title = element_text(face = "bold", size = 14, color = "#333333"),  # Adjust axis label appearance
        axis.text = element_text(size = 12, color = "#333333"),  # Adjust axis tick label appearance
        panel.background = element_rect(fill = "#f0f0f0", color = NA),  # Add panel background
        panel.grid.major = element_line(color = "#CCCCCC", linetype = "dotted"),  # Add major grid lines
        panel.grid.minor = element_blank())  # Remove minor grid lines






```

## Building Type & Price Interaction

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-fig4

# Filter data for constructionTime before 2000
before_2000 <- cleaned_sampled_data[cleaned_sampled_data$constructionTime < 2000, ]

# Filter data for constructionTime after 2000
after_2000 <- cleaned_sampled_data[cleaned_sampled_data$constructionTime >= 2000, ]

# Create separate plots for constructionTime before and after 2000
plot_before_2000 <- ggplot(data = before_2000, aes(x = factor(buildingType), y = price)) +
  geom_boxplot(fill = "#FF83FA", color = "#8B4789") +  # Adjust boxplot fill and outline color
  labs(x = "Building Type", y = "Price", title = "Price Distribution Before 2000",  # Add axis labels and title
       caption = "Data Source: cleaned_sampled_data") +  # Add caption
  theme_minimal() +  # Use a minimal theme
  theme(plot.title = element_text(face = "bold", size = 14, color = "#333333"),  # Adjust title appearance
        axis.title = element_text(face = "bold", size = 12, color = "#333333"),  # Adjust axis label appearance
        axis.text = element_text(size = 10, color = "#333333"),  # Adjust axis tick label appearance
        plot.caption = element_text(hjust = 1, color = "#777777")) +  # Adjust caption position and color
  coord_flip()  # Rotate the plot

plot_after_2000 <- ggplot(data = after_2000, aes(x = factor(buildingType), y = price)) +
  geom_boxplot(fill = "#FFAEB9", color = "#8B5F65") +  # Adjust boxplot fill and outline color
  labs(x = "Building Type", y = "Price", title = "Price Distribution After 2000",  # Add axis labels and title
       caption = "Data Source: cleaned_sampled_data") +  # Add caption
  theme_minimal() +  # Use a minimal theme
  theme(plot.title = element_text(face = "bold", size = 14, color = "#333333"),  # Adjust title appearance
        axis.title = element_text(face = "bold", size = 12, color = "#333333"),  # Adjust axis label appearance
        axis.text = element_text(size = 10, color = "#333333"),  # Adjust axis tick label appearance
        plot.caption = element_text(hjust = 1, color = "#777777")) +  # Adjust caption position and color
  coord_flip()  # Rotate the plot

# Plot the graphs side by side
library(gridExtra)
grid.arrange(plot_before_2000, plot_after_2000, ncol = 2)
```

## Building Structure & Price Interaction

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-fig5

# Create two separate datasets for constructionTime before and after 2000
before_2000 <- cleaned_sampled_data[cleaned_sampled_data$constructionTime < 2000, ]
after_2000 <- cleaned_sampled_data[cleaned_sampled_data$constructionTime >= 2000, ]

# Define the color scale
color_scale <- scale_fill_gradient(low = "#FFE1FF", high = "#EE3A8C")

# Create histograms
plot_before_2000 <- ggplot(data = before_2000, aes(x = buildingStructure, y = price, fill = price)) +
  geom_histogram(stat = "identity", position = "dodge", alpha = 0.7) +
  labs(x = "Building Structure", y = "Price", title = "Price Distribution Before 2000") +
  theme_minimal() +
  coord_flip() +
  color_scale +
  theme(
    plot.title = element_text(face = "bold", size = 16, color = "#333333"),
    axis.title = element_text(face = "bold", size = 14, color = "#333333"),
    axis.text = element_text(size = 12, color = "#333333"),
    legend.title = element_blank(),
    legend.text = element_text(size = 10, color = "#333333"),
    panel.background = element_rect(fill = "#f0f0f0"),
    panel.grid.major = element_line(color = "#CCCCCC", linetype = "dotted"),
    panel.grid.minor = element_blank(),
    legend.key = element_rect(fill = "#f0f0f0")
  )

plot_after_2000 <- ggplot(data = after_2000, aes(x = buildingStructure, y = price, fill = price)) +
  geom_histogram(stat = "identity", position = "dodge", alpha = 0.7) +
  labs(x = "Building Structure", y = "Price", title = "Price Distribution After 2000") +
  theme_minimal() +
  coord_flip() +
  color_scale +
  theme(
    plot.title = element_text(face = "bold", size = 16, color = "#333333"),
    axis.title = element_text(face = "bold", size = 14, color = "#333333"),
    axis.text = element_text(size = 12, color = "#333333"),
    legend.title = element_blank(),
    legend.text = element_text(size = 10, color = "#333333"),
    panel.background = element_rect(fill = "#f0f0f0"),
    panel.grid.major = element_line(color = "#CCCCCC", linetype = "dotted"),
    panel.grid.minor = element_blank(),
    legend.key = element_rect(fill = "#f0f0f0")
  )

# Combine the two histograms
library(gridExtra)
grid.arrange(plot_before_2000, plot_after_2000, ncol = 1)


```

## Elevator & Price Interaction

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: fig-fig6

# Create a scatter plot with different colors for each type of elevator
ggplot(cleaned_sampled_data, aes(x = factor(elevator), y = price, color = factor(elevator))) +
  geom_point(alpha = 0.7) +
  labs(x = "Elevator", y = "Price", title = "Price vs Elevator") +
  scale_color_manual(values = c("#FF0000", "#00FF00"), labels = c("No Elevator", "Has Elevator")) +
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 16),
    axis.title = element_text(face = "bold", size = 14),
    axis.text = element_text(size = 12),
    legend.title = element_blank(),
    legend.text = element_text(size = 12),
    panel.background = element_rect(fill = "#f0f0f0"),
    panel.grid.major = element_line(color = "#CCCCCC", linetype = "dotted"),
    panel.grid.minor = element_blank(),
    legend.key = element_rect(fill = "#f0f0f0"),
    panel.border = element_rect(color = "black", fill = NA),
    panel.grid.major.x = element_line(color = "#CCCCCC", linetype = "dotted")
  ) +
  scale_x_discrete(labels = c("0", "1"))
```

# Discussion


## Data and Model Findings





## Weaknesses and next steps



\newpage

\appendix

```{r}
#| message: false
#| echo: false
#| warning: false
#| label: model-lm1i
# create an influence plot for diagnosing influential cases in linear regression models
influencePlot(lm_model)
```

\newpage

# References
